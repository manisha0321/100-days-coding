

class Solution{
public:
    vector<int> matrixSum(int n, int m, vector<vector<int>> mat, int q, vector<int> queries[])
    {
        // code here
    vector<int> ans;
    int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
    int d_x[] = {-2, -2, -2, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2, 2, 2};
    int d_y[] = {-2, -1, 0, 1, 2, -2, 2, -2, 2, -2, 2, -2, -1, 0, 1, 2};
    for (int i = 0; i < q; ++i) {
      int sum = 0;
      int hop = queries[i][0];
      int row = queries[i][1];
      int col = queries[i][2];
      for (int k = 0; (hop == 1 && k < 8) || (hop == 2 && k < 16); ++k) {
        int nRow = row + (hop == 1 ? dx[k] : d_x[k]);
        int nCol = col + (hop == 1 ? dy[k] : d_y[k]);
        if (0 <= nRow && nRow < n && 0 <= nCol && nCol < m)
          sum += mat[nRow][nCol];
      }
      ans.push_back(sum);
    }
    return ans;
  }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n, m, q, ty, i, j;
        cin>>n>>m;
        vector<vector<int>> mat(n, vector<int>(m, 0));
        for(int i = 0;i < n;i++)
            for(int j = 0;j < m;j++)
                cin>>mat[i][j];
        cin>>q;
        vector<int> queries[q];
        for(int k = 0;k < q;k++){
            cin>>ty>>i>>j;
            queries[k].push_back(ty);
            queries[k].push_back(i);
            queries[k].push_back(j);
        }
        
        Solution ob;
        vector<int> ans = ob.matrixSum(n, m, mat, q, queries);
        for(int u: ans)
            cout<<u<<"\n";
    }
    return 0;
}
// } Driver Code Ends
